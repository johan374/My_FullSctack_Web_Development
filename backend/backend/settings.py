"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path #new importsss
from datetime import timedelta
from dotenv import load_dotenv
import os

load_dotenv()

# Add these to your existing settings
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'my-fullsctack-web.onrender.com',
    'my-fullsctack-web-frontend.onrender.com',
    'localhost',
    '127.0.0.1',
    '0.0.0.0'
] #new featuree *

#new code
REST_FRAMEWORK = {
    # Specifies the default authentication mechanisms for the Django REST Framework.
    # In this case, it uses JWT (JSON Web Tokens) for authentication, provided by Simple JWT.
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    
    # Specifies the default permission classes for API views.
    # 'IsAuthenticated' ensures that only authenticated users can access the API endpoints.
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

SIMPLE_JWT = {
    # Sets the lifetime of the access token.
    # This token is used to authenticate API requests.
    # It will expire after 30 minutes, requiring clients to either log in again or use a refresh token.
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    
    # Sets the lifetime of the refresh token.
    # This token is used to obtain new access tokens when they expire.
    # It remains valid for 1 day, allowing clients to reauthenticate without providing their credentials again.
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}
#end of new code

# Application definition

INSTALLED_APPS = [
    # Default Django apps required for core functionality
    'django.contrib.admin',          # Admin panel for managing the database and site content.
    'django.contrib.auth',           # User authentication system (login, logout, permissions).
    'django.contrib.contenttypes',   # Framework for handling different content types.
    'django.contrib.sessions',       # Manages user sessions (storing data between requests).
    'django.contrib.messages',       # Messaging framework for flashing one-time messages to users.
    'django.contrib.staticfiles',    # Manages serving static files like CSS, JS, and images.

    # Custom app for the project
    "api",                           # Your custom app where API-related functionality is implemented.
    'payments',
    'password_management',
    'SendEmail',

    # Third-party libraries for added functionality
    "rest_framework",                # Django REST Framework for building and managing APIs.
    "corsheaders",                   # Middleware to handle Cross-Origin Resource Sharing (CORS) policies.
]


MIDDLEWARE = [
    # Security middleware that helps protect the site from common security threats
    'django.middleware.security.SecurityMiddleware',   # Provides security-related headers and protections (e.g., HTTPS redirection).
    # Middleware to handle user session management (preserves session data between requests)
    'django.contrib.sessions.middleware.SessionMiddleware',   # Manages sessions to store information across requests (e.g., user logged in).
    # Middleware that provides common view handling functionality
    'django.middleware.common.CommonMiddleware',   # Provides some common utilities like URL normalization and handling of 404 errors.
    # Middleware that provides Cross-Site Request Forgery (CSRF) protection
    'django.middleware.csrf.CsrfViewMiddleware',   # Ensures requests made by users are from trusted sources to prevent CSRF attacks.
    # Middleware to handle user authentication (manages user login and permission checking)
    'django.contrib.auth.middleware.AuthenticationMiddleware',   # Associates the authenticated user with the request.
    # Middleware for handling and displaying messages to users (flash messages)
    'django.contrib.messages.middleware.MessageMiddleware',   # Handles one-time messages (e.g., success or error messages after form submission).
    # Middleware to prevent clickjacking attacks by setting an X-Frame-Options header
    'django.middleware.clickjacking.XFrameOptionsMiddleware',   # Prevents the site from being embedded in iframes to protect against clickjacking.
    
    # CORS middleware to allow cross-origin requests from other domains (needed for APIs)
    "corsheaders.middleware.CorsMiddleware",   # Handles CORS (Cross-Origin Resource Sharing) headers, allowing your API to be accessed from different domains.
]


ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Configure database using dj_database_url
# Import the library that helps us parse database URLs
from dotenv import load_dotenv  # Import to read .env file
import os

# Load all environment variables from .env file
# This makes them available through os.getenv()
load_dotenv()

# Database configuration using environment variables
DATABASES = {
    'default': {
        # Specify PostgreSQL as the database engine
        'ENGINE': 'django.db.backends.postgresql',
        # Get database name from .env, fallback to 'my_db' if not found
        'NAME': os.getenv('DB_NAME', 'my_db'),       
        # Get database user from .env
        'USER': os.getenv('DB_USER'),    
        # Get database password from .env
        'PASSWORD': os.getenv('DB_PASSWORD'), 
        # Get host from .env (localhost for local development)
        'HOST': os.getenv('DB_HOST'),
        # Get port from .env (default PostgreSQL port is 5432)
        'PORT': os.getenv('DB_PORT'),
    }
}



# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

import os

# Static files settings
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Extra static file directories (if you have any)
# Remove or comment out STATICFILES_DIRS if you have it
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),
# ]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Add this to your settings.py after the existing configurations

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/debug.log'),
            'formatter': 'verbose',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'password_management': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Create logs directory if it doesn't exist
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

# Allowing all origins (domains) to make cross-origin requests to the API
#CORS_ALLOW_ALL_ORIGINS = True   # This allows any domain to access your API, which is useful in development but should be restricted in production to ensure security.


CORS_ALLOWED_ORIGINS = [
    "https://my-fullsctack-web-frontend.onrender.com",  # Replace with your frontend URL
    "http://localhost:5173",
]


# Allowing credentials (cookies, HTTP authentication, etc.) to be included in cross-origin requests
CORS_ALLOW_CREDENTIALS = True   # This allows requests to include credentials (e.g., cookies, HTTP authentication), which can be necessary for maintaining user sessions across different domains.

# Email settings (configure according to your email provider)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # Or your email provider's SMTP server
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'robloxmapa@gmail.com'
EMAIL_HOST_PASSWORD = 'xjsv xeyd uffk ahxr' #important
DEFAULT_FROM_EMAIL = 'robloxmapa@gmail.com'

# Frontend URL for password reset
FRONTEND_URL = 'http://localhost:5173'  # Adjust to your frontend URL